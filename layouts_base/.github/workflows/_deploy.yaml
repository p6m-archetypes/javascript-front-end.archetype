name: Deploy Infrastructure

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      account_id:
        required: true
        type: string
        description: The AWS Account ID
      bucket_name:
        required: true
        type: string
        description: The name of the S3 bucket where the state should be stored.
      aws_role_name:
        required: false
        type: string
        default: GithubActionsInfraRole
    secrets:
      npm_github_token:
        description: The Github token to use to authenticate
        required: false

env:
  TERRAFORM_VERSION: 1.3.7
  AWS_DEFAULT_REGION: us-west-2
  AWS_REGION: us-west-2
  AWS_DEFAULT_OUTPUT: json
  GITHUB_TOKEN: ${{'{'}}{ secrets.npm_github_token }}

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{'{'}}{ inputs.account_id }}:role/${{'{'}}{ inputs.aws_role_name }}
          aws-region: ${{'{'}}{ env.AWS_REGION }}

      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{'{'}}{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup NodeJS 16
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Get pnpm cache directory path
        id: pnpm-cache-dir-path
        run: echo "::set-output name=dir::$(pnpm config get cacheFolder)"

      - name: Cache pnpm dependencies
        uses: actions/cache@v2
        id: pnpm-cache
        with:
          path: |
            ${{'{'}}{ steps.pnpm-cache-dir-path.outputs.dir }}
            **\node_modules
          key: ${{'{'}}{ runner.os }}-pnpm-${{'{'}}{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{'{'}}{ runner.os }}-pnpm-

      - name: Install dependencies
        if: steps.pnpm-cache.outputs.cache-hit != 'true'
        run: pnpm install

      - name: Test
        run: |
          RUN=CI pnpm nx affected:test --base=origin/main~1 --parallel 5
          pnpm nx affected:lint --base=origin/main~1 --parallel 5

      - name: Build
        run: |
          pnpm nx affected:build --base=origin/main~1 --parallel 5 --prod --with-deps

      - name: Affected apps
        run: |
          APPS=$(pnpm nx print-affected --type=app --select=projects --base=origin/main~1 | cut -d, -f1)
          echo "Affected applications: $APPS"
          echo "AFFECTED_APPS=$(echo $APPS)" >> $GITHUB_ENV

      - name: Provision
        env:
          AWS_BUCKET_NAME: ${{'{'}}{ inputs.bucket_name }}
        run: |
          for APP in $AFFECTED_APPS
          do
            pnpm nx stack-init $APP -backend-config="key=${APP}.tfstate" -backend-config="bucket=${AWS_BUCKET_NAME}"
            pnpm nx stack-validate $APP
            pnpm nx stack-apply $APP
          done

      - name: Deploy
        run: |
          for APP in $AFFECTED_APPS
          do
            pnpm nx deploy $APP
            pnpm nx invalidate $APP            
          done
